# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [15.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run format:check
      - run: npm run lint
      - run: npm run build --if-present
      - run: npm run ci-test:unit
      - name: Codecov
        uses: codecov/codecov-action@v2 # https://github.com/codecov/codecov-action

  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20.0.0
        id: vercel-deployment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || ''}}

      - id: vercel-status
        run: |
          echo ::set-output name=success::${{ success() }}

      - name: Deployment Action
        uses: chrnorm/deployment-action@v1.2.0
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target_url: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_URL || steps.vercel-deployment.outputs.preview-url }}
          environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
          
      - name: Update deployment status (success)
        if: steps.vercel-status.outputs.success == true
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: '${{ github.GITHUB_TOKEN }}'
          target_url: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_URL || steps.vercel-deployment.outputs.preview-url }}
          state: 'success'
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: steps.vercel-status.outputs.success == false
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: '${{ github.GITHUB_TOKEN }}'
          target_url: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_URL || steps.vercel-deployment.outputs.preview-url }}
          state: 'failure'
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

    outputs:
      preview-url: ${{ steps.vercel-deployment.outputs.preview-url }}

  lighthouse:
    name: Run Lighthouse checks
    runs-on: ubuntu-latest

    needs:
      - deploy

    steps:
      - name: Lighthouse Check
        id: lighthouse-check
        uses: foo-software/lighthouse-check-action@master # https://github.com/foo-software/lighthouse-check-action
        with:
          accessToken: ${{ secrets.GITHUB_TOKEN }}
          prCommentEnabled: true
          urls: https://oppmuntring.sindre.is,${{ needs.deploy.outputs.preview-url }}

      - name: Handle Lighthouse Check results
        uses: foo-software/lighthouse-check-status-action@master
        with:
          lighthouseCheckResults: ${{ steps.lighthouse-check.outputs.lighthouseCheckResults }}
          minAccessibilityScore: "100"
          minBestPracticesScore: "100"
          minPerformanceScore: "70"
          minProgressiveWebAppScore: "25"
          minSeoScore: "55"

  e2e:
    name: Run e2e tests
    runs-on: ubuntu-latest

    needs:
      - deploy

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: 16.1

      - uses: actions/checkout@v2
      - run: npm ci

      - name: Store DEPLOY_URL in env file
        run: |
          touch .env
          echo DEPLOY_URL=${{ needs.deploy.outputs.preview-url }} >> .env

      - name: Run e2e tests
        run: |
          npm run ci-test:e2e
